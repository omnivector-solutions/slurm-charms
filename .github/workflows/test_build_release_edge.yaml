name: TestBuildDeployEdge

on: pull_request

jobs:
  lint-charms:
    name: "Lint and unit test the charms"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: "Install tox"
        run: |
          pip install tox

      - name: "lint the charms"
        run: |
          make lint

      - name: "run slurm-configurator unit tests"
        run: |
          cd charm-slurm-configurator/
          make unit
          make harness
          cd ../

#      - name: "run slurmd unit tests"
#        run: |
#          cd charm-slurmd/
#          make unit
#          cd ../
#
#      - name: "run slurmctld unit tests"
#        run: |
#          cd charm-slurmctld/
#          make unit
#          cd ../
#
#      - name: "run slurmdbd unit tests"
#        run: |
#          cd charm-slurmdbd/
#          make unit
#          cd ../
#
#      - name: "run slurmrestd unit tests"
#        run: |
#          cd charm-slurmrestd/
#          make unit
#          cd ../


  build-charms:
    name: "Build the charms"
    needs: lint-charms
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: "Install charmcraft and build charms"
        run: |
          pip install charmcraft
          make charms

      - name: "Store charm hash filename for later use"
        if: ${{ success() }}
        id: vars
        run: |
          echo "::set-output name=charm_hash::${{hashFiles('*.charm')}}"

      - name: Cache built charms
        if: ${{ success() }}
        id: slurm-charms
        uses: actions/cache@v2
        with:
          path: |
            slurmd.charm
            slurmdbd.charm
            slurmctld.charm
            slurmrestd.charm
            slurm-configurator.charm
          key: slurm-charms-${{ steps.vars.outputs.charm_hash }}

    outputs:
      charm_hash: ${{ steps.vars.outputs.charm_hash }}


  cache-juju-tar:
    name: "Cache juju tar for future jobs"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: "Pull juju creds from s3"
        if: steps.juju-tar.outputs.cache-hit != 'true'
        run: |
          aws s3 cp s3://omnivector-cicd/juju-local/juju-local.tar.gz .
          tar -xzvf juju-local.tar.gz

      - name: "Cache juju tar"
        if: ${{ success() }}
        id: juju-tar
        uses: actions/cache@v2
        with:
          path: |
            .local/share/juju
          key: juju-tar


  deploy-charms-on-aws:
    name: "Deploy charms on aws"
    strategy:
      matrix:
        series: [focal, centos7]
    needs: [cache-juju-tar, build-charms]
    runs-on: "ubuntu-latest"
    steps:

      - uses: actions/checkout@v2
      - name: "Store commit sha for later use"
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: "Install bats"
        run: |
          npm i

      - name: "Restore cached juju tar"
        uses: actions/cache@v2
        with:
          path: |
            .local/share/juju
          key: juju-tar

      - name: "Restore built charms"
        uses: actions/cache@v2
        with:
          path: |
            slurmd.charm
            slurmdbd.charm
            slurmctld.charm
            slurmrestd.charm
            slurm-configurator.charm
          key: slurm-charms-${{ needs.build-charms.outputs.charm_hash }}

      - name: "Set JUJU_DATA to GITHUB_ENV"
        run: |
          echo "JUJU_DATA=/home/runner/work/slurm-charms/slurm-charms/.local/share/juju" >> $GITHUB_ENV

      - name: "Install juju and jq snaps"
        run: |
          sudo snap install juju --classic
          sudo snap install jq

      - name: "Login to juju controller as cicd user"
        run: |
          echo ${{secrets.JUJU_CIRCLECI_USER_PASSWORD}} | juju login --user circleci

      - name: "Add models to house charms for testing"
        if: ${{ success() }}
        id: create-models
        run: |

          model=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}

          juju add-model $model \
              --config resource-tags="owner=gh-actions model=$model" \
              --config logging-config="<root>=DEBUG;<unit>=DEBUG"

          juju add-space -m $model \
              nat 172.31.80.0/24 172.31.81.0/24 172.31.82.0/24 172.31.83.0/24

      - name: "Deploy the slurm charms"
        if: ${{ success() }}
        shell: bash
        run: |
          git clone https://github.com/omnivector-solutions/slurm-bundles ../slurm-bundles

          model=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}

          juju deploy -m $model \
              ./../slurm-bundles/slurm-core/bundle.yaml \
              --overlay ./../slurm-bundles/slurm-core/clouds/aws.yaml \
              --overlay ./../slurm-bundles/slurm-core/series/${{ matrix.series }}.yaml

      - name: "Wait for deployments to settle"
        if: ${{ success() }}
        run: |
          sudo snap install juju-wait --classic
          model=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}

          # sometimes the tests fail because we run out of AWS security groups.
          # Wait 9 minutes for model to deploy
          juju-wait -t 540 -m $model || { err=$?; juju status; return $err; }

          # Sleep for 5 seconds after all units are idle to give slurm
          # a few seconds to start up.
          sleep 5
          # Print the model status to the github action
          juju status -m $model

      - name: "Run bats"
        if: ${{ success() }}
        run: |
          JUJU_MODEL=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }} npx bats ./tests/

      - name: "Remove applications from juju models"
        if: ${{ always() }}
        run: |
          model=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}
          # Remove the applications and wait for the model to empty
          juju remove-application -m $model \
              slurmctld slurmdbd slurmd slurmrestd slurm-configurator percona-cluster
          juju-wait -m $model

      - name: "Grab the charm logs"
        if: ${{ always() }}
        run: |
          model=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}

          for charm in slurmd slurmctld slurmdbd slurmrestd slurm-configurator; do
              log=$charm-$model.log
              juju debug-log --replay --include $charm > $log
          done

      - name: "Upload slurm charm logs"
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: slurm-charm-logs
          path: |
              slurm*-${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}.log

      - name: "Destroy the model"
        if: ${{ always() }}
        run: |
          model=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}

          juju destroy-model -y $model

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: "Cleanup the aws security groups for this model"
        if: ${{ always() }}
        run: |
          # A bug in juju prevents juju from cleaning up security groups correctly.
          # Clean up our own security groups here.
          model=${{ steps.vars.outputs.sha_short }}-${{ matrix.series }}
          sg_ids=`aws ec2 describe-security-groups --filters Name=tag:model,Values=$model --query "SecurityGroups[*].GroupId" | jq -r '.[]'`
          for sg in $sg_ids; do
            aws ec2 delete-security-group --group-id $sg
          done

  release-slurm-charms-to-edge:
    name: "Push slurm charms to s3"
    runs-on: "ubuntu-latest"
    needs: [deploy-charms-on-aws]
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: "Restore built charms"
        uses: actions/cache@v2
        with:
          path: |
            slurmd.charm
            slurmdbd.charm
            slurmctld.charm
            slurmrestd.charm
            slurm-configurator.charm
          key: slurm-charms

      - name: "Push charms to s3"
        shell: bash
        run: |
          for charm in slurmctld slurmdbd slurmd slurm-configurator slurmrestd; do
              aws s3 cp $charm.charm s3://omnivector-public-assets/charms/$charm/edge/
          done


  notify:
    name: Notify status
    runs-on: ubuntu-18.04
    needs: [release-slurm-charms-to-edge]
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False
